---
layout: post
title: "TODAY I LEARNED IT - String convert"
date: 2018-09-14 20:20
tag:
  -Java
comments: true
---

# String.valueOf(Object) vs Object.toString()

According to the Java documentation, String.valueOf() returns:

if the argument is null, then a string equal to "null"; otherwise, the value of obj.toString() is returned.
So there shouldn't really be a difference except for an additional method invocation.

Also, in the case of Object#toString, if the instance is null, a NullPointerException will be thrown, so arguably, it's less safe.

`
public static void main(String args[]) {
    String str = null;
    System.out.println(String.valueOf(str));  // This will print a String equal to "null"
    System.out.println(str.toString()); // This will throw a NullPointerException
}
`

## Stephen C (Stack Overflow)

Some developers acquire the (IMO) bad habit of "defending" against nulls. So you see lots of tests for nulls, and treating nulls as special cases. The idea seems to be prevent NPE from happening.

I think this is a bad idea. In particular, I think it is a bad idea if what you do when you find a null is to try to "make good" ... without consideration of why there was a null there.

In general, it is better to avoid the null being there in the first place ... unless it has a very specific meaning in your application or API design. So, rather than avoiding the NPE with lots of defensive coding, it is better to let the NPE happen, and then track down and fix the source of the unexpected null that triggered the NPE.

So how does this apply here?

Well, if you think about it, using String.valueOf(obj) could be a way of "making good". That is to be avoided. If it is unexpected for obj to be null in the context, it is better to use obj.toString().
