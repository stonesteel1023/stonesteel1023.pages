---
layout: post
date: 2018-12-18 22:38
title:
comments: true
tag: RESUME
---

# 신입사원이 대기업에서 배울 수 있는 5가지 ( 출처 : https://brunch.co.kr/@oms1225/22 )

### 1. 일을 처리하기 위한 품의, 결제, 프로세스를 파악

### 2. 조직도를 파악하고자 하며, 각 조직의 역할에 대해 숙지

### 3. 메일 작성 등에 대한 기본적인 업무 체력 기름

### 4. 다른 팀원들과 인사를 하고 미팅을 잡거나 업무를 부탁하는 방법을 배움

### 5. 자신의 생각을 정리하여 전달할 수 있는 보고양식에 대해 고민



# 경력개발자가 대규모 서비스회사에서 경험할 수 있는 것들 ( 출처 : http://jhleed.tistory.com/m/123 )

## 활발한 코드 리뷰
이전 스타트업에서는 혼자 2-3개의 프로젝트를 진행했기에 코드 리뷰를 할 일이 없었다. 그래서 코드 리뷰에 갈증을 느끼고 있었다.
현재 회사에서는 하나의 프로젝트를 여러 명이 협업하여 진행하기 때문에 코드 리뷰가 활발하게 진행되고 있다.
시니어의 피드백도 좋았지만, 그보다 좋았던 것은 코드 리뷰를 할 때 모두가 서로의 감정이 상하지 않도록 배려해준다는 것이었다.
지식의 높낮이와 상관없이 서로를 존중하는 것. 코드 리뷰의 기초이자 가장 중요한 점이라고 생각한다.

## 업무 근육이 강해졌다.
내 경우는 단순히 기술 스택만 바뀐 것이 아니라 회사의 규모 자체가 크게 바뀌었는데, 스타트업에 비해 업무 프로세스가 훨씬 견고하게 정립이 되있고, 협업하는 부서들이 아주 많아졌다.
메일 쓰기, 문서 정리하기, 설득하기, 도움 요청하기 등등.. 처음에는 이런 것들을 익히는 게 낯설고 힘들었다. 나를 번아웃에 빠지게 만드는 요인 중 하나이기도 했다.
그렇지만 시간이 지나서 요령이 붙었고, 이제는 꽤 능숙하게 쓸 수 있게 되었다.
지금은 생각이 많이 바뀌었다. 메일 쓰기, 도움 요청하기, 문서 정리하기 등은 정말 중요한 협업 능력이다.

## 새로운 개발환경
주 기술 스택이 Java, Spring, Linux 에서 C#, .NET, Window 으로 변경되었다.
그렇지만 패러다임이 바뀐 것이 아니었기 때문에 익숙해지는데 별로 어렵지 않았다.
그래도 역시나 삽질은 했다.
(당연히 되어야 할 것 같은데 안 되는 것들이 많았다. 예를 들면 배포? 알고 보면 뭔가 빼먹었다거나. 역시 한 번에 잘 되는 건 없었다.)

## 대용량 데이터 경험
이전에는 상상도 하지 못했던 규모의 데이터들을 핸들링하는 경험을 했다.
빅데이터 플랫폼 (Hadoop Ecosystem .. )을 이용해서 서비스를 개발했고, 곧 런칭 예정이다.
그렇지만 빅데이터 플랫폼은 아직 사용하는 수준에 머물러 있다. 노하우를 얻으려면 더 많은 공부와 경험이 필요하다는 것을 느낀다.

## 레거시(Legacy)
레거시를 좋아하는 개발자는 거의 없을 것이다. 나 또한 그렇다.
업력이 오래된 회사는 누구나 가지고 있는 레거시지만 .. 스트레스를 많이 받았다. 코드를 쳐다보기도 싫을 정도로. (매직넘버를 찾아 테이블 더미를 뒤지고 있을 때면 여긴 어디 나는 누구?)
그리고 전 회사의 레거시와 다른 점은 매출과 굉장히 밀접한 시스템들이라 레거시를 함부로 고치지 못한다는 점이다. (뭐, 사실 그걸 떠나서 너무 복잡하고 시스템도 커서 고치기도 힘들다.)
내가 특히 레거시에 스트레스를 많이 받았던 것은 코드 스멜을 참기 힘들어하는 사람이었기 때문이다.

아마 개발자로 월급을 받기 시작한 시절부터 클린 코드, 리팩토링, TDD의 중요성을 가르침 받아왔기 때문인 것 같다. (PS. 이건 정말 감사한 일이며, 나는 지금도 위의 것들의 중요성을 가르쳐준 분을 멘토로 모시고 있다.)
그렇지만 레거시를 대하는 태도를 바꾸고 나서는 괴로움에서 많이 해방되었다.

- 지금은 레거시를 보면 아래와 같이 처리한다.

당연하겠지만 내가 기능 추가를 하는 부분에 레거시가 있으면 리팩토링을 한다.
보이스카우트 규칙, 캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라.
그 외 부분에서 레거시를 발견하는 경우는 아래와 같이 한다.
리팩토링 비용이 적은 경우 (코드 변화가 많지 않고, 사이드 이펙트가 없을 것이라는 확신이 드는 경우) 리팩토링한다. 당연히 관련된 부분에 대해 테스트를 해본다.
리팩토링 비용이 많이 든다고 판단되는 경우 리팩토링 하지 않는다. 대신 다음 작업자가 인식할 수 있도록 주석을 남겨둔다. 기술 부채가 너무 크다고 판단되는 경우 팀에 공유한다.

## 과도한 책임감의 폐해

나는 남에게 피해를 끼치는 것을 싫어하는 성격이다. 업무적으로는 특히나 그렇다.

그리고 경력직으로 입사했기 때문에 맡은 업무에 대한 책임감이 컸다.

내가 맡은 일에서 문제가 발생하면 모든 것이 내 책임이라고 생각했고, 모든 일을 완벽하게 잘 끝내야만 한다고 생각했다.

그러다 보니 문제가 생겼다.

- 내 힘으로 통제할 수 없는 변수가 생긴다. (아주 잦다.)
- 예상된 일정에 지장을 주게 된다.
- 어떻게든 할당된 시간 안에 업무를 끝내고자, 야근한다.
- 얼마 지나지 않아, 이게 진짜 심각하게 잘못하고 있다는 것을 깨닫고 반성했다.

내 진행 상황과 모든 잠재적 위험 요소는 팀에 공유해야 한다. 특히 팀장님께 꼭 공유해야 한다.

이유는 아래와 같다.

- 리소스 배분에 문제가 생길 수 있다. 내가 아주 바쁜 상황인데, 팀장님이 인지하지 못하시면 나에게 업무가 추가적으로 들어올 수 있다.
- 이로 인해 프로젝트에 문제가 생길 수 있다. 그러면 모두가 힘들어진다.
- 지금은 잠재적으로 일어날 수 있는 모든 위험 변수들을 계산해서 팀에 공유한다.

업무를 진행하며 일어나는 모든 진행 상황도 주간 회의와 Tracking 가능한 시스템에 남겨둔다. (JIRA, Wiki, Mail 등)

최근 내가 진행한 Task 중 모든 도메인에 영향을 미칠 수 있는 잠재적인 리스크가 매우 큰 Task가 있었다.

설계 시 이 부분을 충분히 고려했고, 기획자분과 우리 팀에 해당 리스크에 대해 상세히 공유했다. 그리고 이러한 점을 계산해서 일정을 산출했다.
예상대로 문제가 생겼다. 그렇지만 리스크가 충분히 공유되어 있었기에 팀장님의 확인 하에 팀원분들이 즉각적으로 지원을 해주셨고, 덕분에 Task를 마무리 할 수 있었다. (함께 고생해주신 팀원 분들께 정말 감사하다.)
그리고 나는 휴가를 무사히 다녀올 수 있었다.


