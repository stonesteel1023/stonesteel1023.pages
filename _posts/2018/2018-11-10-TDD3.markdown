Jason Ryu 하나 씩 질문하겠습니다.
“단위 테스트는 네트워크 접근이나 DB 접근과 같은 의존성으로 부터 격리되어야 한다.”
“하나의 테스트를 위해 전체 DB와 관련된 세팅 작업을 해야하는 상황을 떠올려본다면 … 생각만으로도 끔찍하다.”
단위 테스팅에서 외부 자원의 접근은 근본적인 격리대상이 아닙니다. 외부 자원에 대해 DOC(Depended on Component)를 사용할지 테스트 대역(Test Double)을 사용할지 결정하는 가장 중요한 요인은 ‘determinism’과 ‘speed’입니다.
예를 들어 다음 코드의 테스트 케이스들은
https://github.com/Reacture/Khala.EventSourcing/blob/a803566146b8596751b4e5f5bfa8a2b011dd7ab9/source/Khala.EventSourcing.Tests.Core/EventSourcing/Sql/SqlEventStore_specs.cs
데이터베이스 인스턴스에 접근하지만 충분히 deterministic 하며 괴로움을 느낄 정도로 느리지 않습니다. 이것들은 생각을 넘어 직접 읽어봐도 별로 끔찍하지 않은 단위 테스트 케이스들입니다.
다음 글들은 제 생각과 매우 유사한 내용을 담고 있습니다.
Martin Fowler — https://martinfowler.com/bliki/UnitTest.html
ThoughtWorks — https://www.thoughtworks.com/insights/blog/mockists-are-dead-long-live-classicists
무조건적인 테스트 대역 사용은 가정을 증폭시켜 단위 테스팅의 신뢰도를 떨어뜨릴 수 있습니다. 디자인을 훼손하기도 합니다. 테스트 코드와 프로덕션 코드의 결합을 높여 결국 TDD를 망치게 하기도 합니다. 다음 슬라이드의 19~25페이지가 그런 상황에 대해 얘기합니다.
https://www.slideshare.net/gyuwonyi/why-you-always-fail-with-tdd
DHH가 “TDD is dead”라는 헛소리를 한 이유도 단위 테스팅(또는 TDD)와 테스트 대역 사용을 구분하지 못했기 때문입니다. 그리고 얼마 후 Kent Beck이 그것을 지적해줬습니다.
