---
layout: post
title: "EJB기반 웹 어플리케이션 개발환경 세팅-XDoclet 세팅"
date: 2018-11-21 10:22
comments: true
tag : eclipse
---
> 출처 : http://follet.tistory.com/entry/XDOCLET-XDOCLET-전반적인-설명

# XDOCLET 전반적인 설명

## 1. xdoclet에 대하여
Xdoclet은 점점 더 복잡해지고, 수 많은 Descriptor파일과 소스파일 사이의 동시성을 유지하도록 하는 코드 생성 엔진이다. Xdoclet은 자바로 웹 애플리케이션을 개발할 경우 Attribute Oriented Programming(이하 AOP, Aspect Oriented Programming이 아니다.)이 가능하도록 한다. 자바 소스코드에서 JavaDoc 태그를 이용하여 JavaDoc을 생성해본 개발해본 개발자라면 Xdoclet의 AOP개발 방식에 대하여 쉽게 이해할 수 있다. JavaDoc을 생성하는 방식을 보면 자바소스의 주석 내에 JavaDoc 태그를 이용하여 JavaDoc문서를 자동으로 생성할 수 있다. Xdoclet 또한 각 컴포넌트별로 정의된 태그를 자바 소스에 사용함으로 인해 자바소스 및 Descriptor파일을 자동으로 생성할 수 있는 방식이다. 따라서 자바 소스코드가 수정될 경우 Descriptor파일을 수정할 필요가 없어진다. 소스코드 하나만 관리하면 되기 때문에 상당한 개발시간의 단축효과를 볼 수 있으며, 자바소스와 Descriptor파일의 동시성 또한 유지할 수 있다.
Xdoclet 사이트에서는 Xdoclet을 사용할 경우 다음과 같은 이득을 얻을 수 있다고 주장한다.

## 2. Ant와 Xdoclet을 이용한 개발 방법
웹 애플리케이션의 구조가 점점 복잡해지면서 하나의 웹 애플리케이션을 개발하기 위하여 관리해야하는 Descriptor파일들(web.xml, taglib files, ejb-jar.xml등)이 점차 많아지고 있다. 또한 개발되는 애플리케이션에서 다른 프레임워크을 추가하는 경우라면 이 수는 더욱 증가하게 된다. 스트럿츠를 이용하기 위해서도 struts-config.xml을 따로 관리해주어야 한다.
웹 애플리케이션의 규모가 커지면 커질수록 이 같이 관리해야하는 Descriptor파일은 무수히 많아진다. 따라서 개발되고 있는 소스가 수정되면 Descriptor파일과 소스파일간의 동시성(synchronization)을 일치시키기 위하여 많은 시간을 할애해야한다.
특히 EJB를 기반으로 개발하는 웹 애플리케이션의 경우 관리해야하는 Descriptor파일의 수는 2배이상 증가하게 된다. EJB같은 경우 EJB를 지원하는 벤더에 따라 Descriptor파일이 달라지기 때문에 이에 따른 동시성을 유지하는 것 또한 상당히 많은 시간을 요구한다. 또한 EJB를 기반으로 개발할 경우 하나의 컴포넌트를 개발하기 위하여 7개 이상의 많은 파일을 추가로 개발해주어야한다. EJB에 새로운 인터페이스가 추가될 경우 더불어 변경해주어야 하는 파일의 수 또한 많다. EJB를 기반으로 개발을 해본 개발자들이라면 Descriptor파일과 소스파일사이의 동시성을 유지하는데 얼마나 많은 시간이 소요되는지 느낄 것이다.

- 소스코드가 변경될 때마다 Descriptor파일을 걱정할 필요없다. Descriptor파일은 소스가 변경될 때마다 계속해서 새로 생성된다.
- 특히 EJB를 기반으로 개발할 경우 하나의 컴포넌트를 개발하기 위하여 7개 또는 그 이상의 파일을 개발해야 한다. 그러나 Xdoclet을 사용할 경우 하나의 소스코드만 생성하면 된다. 나머지 소스파일 및 Descriptor파일은 Xdoclet이 자동생성해준다.
- Xdoclet을 이용할 경우 개발시간을 상당히 단축시킬 수 있다. 개발자들은 단지 비지니스 로직에만 전념할 수 있다.
글로만 Xdoclet의 놀라운 점을 설명하는데는 한계가 있다. Xdoclet을 이용하여 web.xml, struts-config.xml을 자동생성하는 예제를 보면 Xdoclet의 매력에 흠뻑 빠질 것이다. 아직 Xdoclet이 뭔지 모르겠다고 조급해하지마라. 계속되는 예제를 통해 Xdoclet에 대하여 이해할 수 있을 것이다.
Xdoclet의 진정한 장점은 EJB를 개발할 때 발휘된다. 그러나 스트럿츠 프레임워크도 많은 소스파일과 struts-config.xml의 동시성을 유지해야하는 만큼 Xdoclet의 장점을 피부로 느낄 수 있을 것이다. 이 책의 모든 예제는 Xdoclet 기반위에서 개발할 것이다. 스트럿츠 프레임워크를 이용하여 개발해본 개발자들이라면 자바 소스파일과 struts-config.xml의 동시성을 유지하는 것이 얼마나 어려운지 알 것이다. 특히 여러명의 개발자들이 프로젝트를 진행할 때 동시성을 유지하기란 더 어렵다. Xdoclet을 이용하여 비지니스 로직을 개발하는 것 이외에 발생했던 많은 시간을 단축할 수 있기 바란다.

## 3. Xdoclet 설치
Xdoclet으로 web.xml, ejb-jar.xml, struts-config.xml등의 Descriptor파일을 자동으로 생성하기 위해서는 먼저 ANT가 설치되어 있어야 한다. ANT의 설치 및 사용법은 부록을 참조하기 바란다.
Xdoclet은 http://xdoclet.sourceforge.net에서 오픈소스로 개발되고 있기 때문에 무료로 사용이 가능하다. 2003년 8월 현재 최신 버전은 1.2.0 베타3상태이다. 이 책에서는 1.2.0 베타3 버전을 이용하여 개발하도록 하겠다. Xdoclet을 설치하는 과정은 다음과 같다.

1. http://sourceforge.net/project/showfiles.php?group_id=31602 에서 Xdoclet 1.2.0 베타3 버전을 다운받는다.
2. 다운받은 파일을 개발자들이 원하는 위치에 압축을 푼다.
3. Xdoclet을 사용하기 위하여 필요한 모든 Jar파일들은 Xdoclet압축을 푼 디렉토리 아래의 lib에 위치해 있다. 모든 Jar파일들을 웹 애플리케이션의 라이브러리를 관리하는 디렉토리에 복사한다.
이상으로 Xdoclet을 사용할 모든 준비가 완료되었다. 다음은 ANT를 이용하여 자바 소스에 생성한 각 컴포넌트별 태그를 이용하여 Descriptor파일을 자동적으로 생성하면 된다. 

이 책의 모든 예제는 이미 Xdoclet이 설치되어 있는 상태이기 때문에 추가적으로 설치할 jar파일은 없다. Xdoclet관련 패키지는 각 장 예제의 lib디렉토리 하위의 xdoclet 디렉토리(1,2장은 lib/main/xdoclet)에 위치해 있다. 만약 Xdoclet을 이용하는 새로운 애플리케이션을 개발할 경우 위 설치과정에 따라 Xdoclet을 설치하면 된다.

## 4. Xdoclet 예제
Xdoclet예제는 보여주기 위하여 먼저 서블릿예제를 먼저 보도록 하자. 서블릿을 생성한 다음 웹 애플리케이션에서 사용하기 위하여 web.xml에 매핑해주어야 한다. 스트럿츠 또한 서블릿을 사용하고 있으며, web.xml에서 설정이 필요하기 때문에 서블릿예제를 먼저 살펴보는 좋다고 생각한다. 다음은 Xdoclet의 다양한 예제를 살펴보기 위하여 커스텀 태그 예제를 살펴보도록 하겠다. 하나의 커스텀 태그를 만들기 위해서는 tld파일을 생성할 필요가 있다. 개발을 진행하는 중 커스텀 태그에 애트리뷰트가 하나 추가될 때마다 tld파일을 수정해 주어야 하는 불편함이 있다. Xdoclet을 이용하여 이 같은 단계를 줄일 수 있는 방법에 대하여 살펴보도록 하겠다.
마지막 예제로 스트럿츠 프레임워크를 이용하여 웹 애플리케이션을 Xdoclet을 이용하여 개발하는 과정에 대하여 살펴보도록 하겠다. 스트럿츠 프레임워크의 경우에 하나의 요청을 처리하기 위하여 Action, Form, Exception 정보들을 struts-config.xml에서 관리해야 한다. Xdoclet을 이용하여 수많은 클래스들과 struts-config.xml의 동시성을 유지하는 방법에 대하여 알아보겠다.
