---
layout: post
date: 2018-12-19 23:59
title: "SI현장에서 성능향상을 위한 개발자들의 오해"
tag: java
comments: true
---

> 출처 : http://benelog.egloos.com/m/1382604
  원제 : java의 List와 반복문(loop), 그리고 변수 선언 위치에 대해서

<h3>들어가며</h3><p>&nbsp;저는 요즘 유지보수 프로젝트에서 일하고 있습니다.&nbsp;많은 시간을&nbsp;코드를 다듬는데 쓰고 있고&nbsp;&nbsp;다른 개발자들의 코드를 많이 볼 수 있는 기회가 되고 있습니다. &nbsp;그러다 보니&nbsp;List의 크기만큼 반복문을 돌리는&nbsp;코드에서&nbsp;많은 개발자들은&nbsp;&nbsp;루프 블럭 안에서만 쓰는 변수의 선언을 밖에다 하고 있다는 것을 발견하게 되었습니다.&nbsp; 이에 대해서 개발기간에 대화를 해볼 기회가 없었다는 것이 아쉽게 느껴지더군요. 그래서 그 내용과 함께&nbsp;list와 loop에 관한 몇가지 이야기들을 같이 묶어서 글로 정리해 보게 되었습니다. 첫번째 소제목과 두번째 소제목 아래의 내용은&nbsp;성능을 약간이라도 더 개선하고 싶을 때 도움이 될 정보들이고, 세번째 소제목에서 위에서 말한 많은 개발자들의 습관이 실제로는 성능에는 아무 영향이 없음을 설명할려고 했습니다.</p><p>&nbsp;</p><h3>ArrayList와 Vector는&nbsp;RandomAccess inteface를 구현하고 있다.</h3><p>List의 크기만큼 반복문을 도는 방법에는 크게 두 가지 방법이 많이 쓰이고 있죠.</p><p>1. <a class="external" title="java.util.List" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html">java.util.List</a>의 <a class="external" title="size()" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#size%28%29">size()</a>로 크기를 구해서 그 갯수만큼 반복문을 돌아서 <a class="external" title="get(int index)" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#get%28int%29">get(int index)</a>로 List안에 있는 객체를 가지고 온다.</p><p>2. <a class="external" title="iterator() " href="http://http://java.sun.com/j2shttp://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#iterator%28%29">iterator()</a> 로 <a class="external" title="java.util.Iterator" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Iterator.html">java.util.Iterator</a> 객체를 얻은 후 이 객체의 <a class="external" title="hasNext()" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Iterator.html#hasNext%28%29">hasNext()</a>가 true인 동안 반복문을 돌아서 <a class="external" title="next()" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Iterator.html#next%28%29">next()</a>로 List안의 객체를 가지고 온다.</p><p>&nbsp;</p><p>그런데 그 객체가 <a class="external" title="java.util.ArrayList" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/ArrayList.html">java.util.ArrayList</a>나&nbsp;<a class="external" title="java.util.Vector" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Vector.html">java.util.Vector</a>가 확실할 때는 1번의 방법이 더 빠르다고 합니다. 그 이유는 API문서를 보시면 확인할 수 있듯이 ArryList와 Vector는 <a class="external" title="java.util.RandomAccess" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/RandomAccess.html">java.util.RandomAccess</a> interface를 구현하고 있기 때문입니다. RandomAccess의 API문서에는 아래와 같이 적혀있습니다.</p><p>&nbsp;</p><blockquote><p>Marker interface used by List implementations to indicate that they support fast (generally constant time) random access.</p></blockquote><p>&nbsp;</p><p>List의 구현체가 빠른 임의접근을 지원한다는 것을 나타내는 표시 interface라는 말입니다. 선언되어 있는 메서드도 아무것도 없지요.</p><p>API문서에는 이렇게 적혀있지만 성능이 항상&nbsp;우선순위의 가치는 아니므로 RandomAccess List에는 <a class="external" title="get(int index)" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#get%28int%29">get(int index)</a>을 써야&nbsp;한다는 법칙을 만들 수는 없을 것입니다. 가령 List와 다른 Collection 객체, 배열 등을 한꺼번에 묶어서 처리할 때는 iterator pattern이 유용합니다. (참고자료5: Head first design pattern).</p><p>하지만 성능이 중요한 코드를 짜는 경우에는&nbsp; 객체를 생성하는 부분에서 ArrayList나 Vector를 생성한다는 정보를 확실히 가지고 있고, 그것이 LinkedList같은 다른 객체로 변경될 가능성이 없다면&nbsp;<a class="external" title="java.util.RandomAccess" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/RandomAccess.html">java.util.RandomAccess</a> interface의 명세는 무시할 수만은 없을 것입니다.</p><p>List 처리 &nbsp;시에 성능을 극대화 시키기 위해서 RandomAccess interface를 구현했는지 검사해서&nbsp; <a class="external" title="get(int index)" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#get%28int%29">get(int index)</a>를 쓸지 <a class="external" title="iterator() " href="http://http//java.sun.com/j2shttp://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#iterator%28%29">iterator()</a>를 사용할지 결정하는 코드도 있기는 합니다. (참고자료2의 자바퍼포먼스 튜닝 중).&nbsp;&nbsp;보통 그렇게까지 성능을 쥐어짤 경우는 흔치 않겠죠.</p><p>&nbsp;</p><h3>List의 크기를 반복해서 구할 필요가 없다.</h3><p>위에서 1번으로 제시된 것처럼 <a class="external" title="get(int index)" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#get%28int%29">get(int index)</a> 를 쓰는 방법을 쓸 때도 아래와 같은 코드를 많이 보게 됩니다.</p><p>&nbsp;</p><blockquote><p>for( int i = 0; i &lt; list.size(); i++){</p><p style="MARGIN-LEFT: 1em">//일하기</p><p>}</p></blockquote><p>&nbsp;</p><p>흔하게 보는 코드죠? 그런데 위 코드에도 굳이 필요없는 성능의 손실이 있습니다. 바로 list의 크기를 구하는 <a class="external" title="size()" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/List.html#size%28%29">size()</a> 메서드가 매번 반복해서 호출된다는 것입니다. 반복문 내에서 list의 크기가 변하는 경우가 아니라면 for문의 초기화 때 한번으로 충분합니다.</p><blockquote><p>for(int i = 0, n = list.size(); i &lt; n; i++){</p><p style="MARGIN-LEFT: 1em">//일하기</p><p>}</p></blockquote><p>&nbsp;</p><p>n을 for문 앞에서 선언하는 방법도 있지만, for block 밖에서 n이 필요한 경우가 아니라면&nbsp;n이 for의 초기화 부분에 선언되고 할당되는 것이 좋습니다.&nbsp;변수의 유효범위가 최소화되기 때문이죠.</p><p>&nbsp;</p><h3>Loop안에서만 사용하는 변수의 선언을 loop밖에 해야 할까?</h3><p>코드의 중복을 없애라거나 적절한 API를 쓴다거나 등의 바람직한 코드를 위한 지침에는 항상 다음과 같은 이유들이 붙어다닙니다.</p><ul><li>코드의 가독성이 좋아진다. <li>유지보수가 편해진다. <li>오류의 발생 가능성이 줄어든다. </li></ul><p>&nbsp;</p><p>지역변수의 유효범위를&nbsp;최소화하라는 지침에도&nbsp;위의 이유들이 역시나&nbsp;&nbsp;인용되고 있지요.&nbsp;(참고자료1 Effective Java, 참고자료 3 Code completed 2nd Edition). 변수의 선언과 초기화, 사용 사이에 있는 코드가&nbsp;많을 수록&nbsp;&nbsp;취약성 있는 코드가 들어갈 여지는 커집니다. 이른 시점부터 쓰이지도 않는 객체가 초기화되어서 메모리를 낭비하고 있을 가능성도 있고, 선언되고 한번도 쓰이지 않는 변수들도 눈에 잘 들어오지 않게 됩니다.&nbsp;(뭐 쓰이지 않는 변수는 Eclipse의 warning으로 잡아낼수 있기는 합니다만)</p><p>&nbsp;</p><p>지역변수를 쓰기 바로 전에 초기화하고,&nbsp;선언과 함께 초기화 하는 좋습니다. 즉 가능한 변수가 처음 사용되는 곳의 가장 근접한 위치에서 선언되고 초기화되어야 한다는 말이죠. 변수의 수명을 가능한 짧게 유지하라는 말로도 표현됩니다. 하지만&nbsp;많은 개발자들은 메소드의 처음에서 C언어처럼 쭉 변수를 선언하고 시작하고 있습니다.</p><p>&nbsp;</p><p>&nbsp;반복문에서는&nbsp;while보다는&nbsp;for를 쓰는 것이&nbsp;변수의 범위관리에 유리합니다.</p><p>&nbsp;</p><p>&nbsp;보통 iterator와 while이 아래와 같이 많이 쓰이고 있습니다.</p><blockquote><p>Iterator i&nbsp;= c.iterator();</p><p>while (i.hasNext()){</p><p style="MARGIN-LEFT: 1em">&nbsp;doSomething(i.next());</p><p>}</p></blockquote><p>&nbsp;</p><p>&nbsp;이 것을 for문으로 쓴다면 다음과 같습니다.</p><blockquote><p>for&nbsp;(Iterator&nbsp;i = c.iterator() ; i.hasNext();&nbsp;) {</p><p style="MARGIN-LEFT: 1em">&nbsp;doSomething(i.next());</p><p>}</p></blockquote><p>&nbsp;</p><p>작은 차이지만&nbsp;Iterator&nbsp;i는 for block을 벗어나는 순간&nbsp;&nbsp;잊어버려도 되는 것이니 block 밖에서 개발자의 머리는&nbsp;조금이나마 가벼워 질 수 있습니다. 이것은 캡슐화의 원칙인 class의 맴버 중 밖에서 볼 필요 없는 것들은 private으로 선언해야 하는 이유와 일맥상통합니다.</p><p>&nbsp;</p><p>그렇다면 다음의 경우는 어떠할 까요?</p><p>&nbsp;1. 루프밖에서 list에서 꺼내서 담을 변수 선언</p><blockquote><p>&nbsp;&nbsp;&nbsp; static int countOfIncluded(List list, String str){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><em class="italic">String element;</em></strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i=0,n=list.size();i&lt;n;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em class="italic"><strong>element = (String) list.get(i);</strong></em><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (element.indexOf(str)!= -1 ) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return count;<br>&nbsp;&nbsp;&nbsp; }</p></blockquote><p>&nbsp;</p><p>&nbsp;&nbsp;2. 루프안에서 list에서 꺼내서 담을 변수 선언</p><blockquote><p>&nbsp;&nbsp;&nbsp; static int countOfIncluded(List list, String str){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int count = 0;<br><em class="italic"><br></em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i=0,n=list.size();i&lt;n;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong><em class="italic">String&nbsp;</em></strong> <em class="italic"><strong>element = (String) list.get(i);</strong><br></em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (element.indexOf(str)!= -1 ) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return count;<br>&nbsp;&nbsp;&nbsp; }</p></blockquote><p>&nbsp;</p><p>&nbsp;많은 분들이 1번과 같이 코드를 작성하고 있고, 1번이 성능이 좋다는 '믿음'을 가지고 계실 것입니다. 실제로 한 번 테스트 해볼까요? 크기가&nbsp;10000개인 리스트를 생성해서 100번씩 반복해서 실행시간을 찍어보는 코드를 만들어보았습니다. 1번 방법은 <a class="attachment" title="ListReader1.java" href="http://benelog.springnote.com/pages/386996/attachments/166292">ListReader1.java</a>, 2번 방법은 <a class="attachment" title="ListReader2.java" href="http://benelog.springnote.com/pages/386996/attachments/166293">ListReader2.java</a>, 시간을 찍어보는 코드는&nbsp;<a class="attachment" title="LoopTester.java" href="http://benelog.springnote.com/pages/386996/attachments/166297">LoopTester.java</a>&nbsp;로 첨부하였습니다. 이런 비교 시에는 실행순서에 따라서도&nbsp;실행시간이 영향을 받으므로 1,2,2,2,1,1,2의 순서로 몇번씩 사이에 걸린 시간을 밀리세컨드로 출력하게했습니다. 실행결과는 다음과 같습니다.</p><blockquote><p>test1:밖에 선언 2243<br>test2:안에 선언 2153<br>test2:안에 선언 2184<br>test1:밖에 선언 2253<br>test1:밖에 선언 2213<br>test2:안에 선언 2123</p></blockquote><p>&nbsp;</p><p>&nbsp;거의 차이가 없거나 오히려 안에 선언한 쪽이 미묘하게 빠르기도 합니다.</p><p>이번에는 javap -c 를 이용해서 컴파일된 byte 코드를 분석해 보겠습니다. 결과는 첨부파일로 넣었으나 알아보기 쉽도록 diff로 비교한 화면을 캡쳐했습니다.</p><p><a class="attachment" title="ListReader1ByteCode분석.txt" href="http://benelog.springnote.com/pages/386996/attachments/166327">ListReader1ByteCode분석.txt</a></p><p><a class="attachment" title="ListReader2ByteCode분석.txt" href="http://benelog.springnote.com/pages/386996/attachments/166328">ListReader2ByteCode분석.txt</a></p><p><img class="attachment" title="byteCodeDiff.JPG" alt="byteCodeDiff.JPG" src="http://benelog.springnote.com/pages/386996/attachments/166300"></p><p>&nbsp;</p><p>노란 줄이 많은 것은&nbsp;라인수가 1라인 차이가 나고,&nbsp;local variable이 저장되는 공간의&nbsp;index번호가&nbsp;달라서입니다. 내용을&nbsp;보시면 거의&nbsp;똑같이 실행되고 있는 것을&nbsp;알 수&nbsp;있으실 것입니다.&nbsp; 루프가&nbsp;도는 goto문장을&nbsp;봐도 (왼쪽의 47라인과 오른쪽의 46라인) 같은 곳으로 (13라인과 12라인)으로 이동을 하기 때문에 특별히 오른쪽 예제2의 경우가 더 일을 하는 것은 없습니다. 다만 3번째 라인 istore n 이였던 것이 istore_n 으로 바뀌는 등&nbsp;언더바(_)가 들어간 부분이 있습니다.</p><p>&nbsp;</p><p>각각의 명령어의 의미는 다음 링크를 확인해 보시면 나와있습니다.</p><ul><li><a class="external" title="istore" href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc6.html#istore">istore</a> <li><a class="external" title="istore_n " href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc6.html#istore_n">istore_n</a> <li><a class="external" title="iload" href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc6.html#iload">iload</a> <li><a class="external" title="iload_n" href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc6.html#iload_n">iload_n</a> <li><a class="external" title="명령어의 인덱스페이지" href="http://java.sun.com/docs/books/jvms/second_edition/html/VMSpecIX.fm9.html">명령어의 인덱스페이지</a> </li></ul><p>내용을 보면 istore과 istore_n은&nbsp; 전자가 암시적이라는 것만 빼고는 같다고&nbsp;나옵니다. (Each of the istore_&lt;n&gt; instructions is the same as istore with an index of &lt;n&gt;, except that the operand &lt;n&gt; is implicit. ) iload의 경우도 마찬가고요.&nbsp; 어떤 차이가 있을까 해서 검색해 봤더니 아래와 내용을 발견했습니다.</p><blockquote><p>'istore_&lt;n&gt;' is functionally equivalent to 'istore &lt;n&gt;', although it is typically more efficient and also takes fewer bytes in the bytecode</p><p><a class="external" title="원본링크 " href="http://www.google.com/search?q=cache:SwAZqu5poI0J:www.cat.nyu.edu/%7Emeyer/jvmref/ref--37.html+istore_%3Cn%3E+more&amp;hl=ko&amp;ct=clnk&amp;cd=1&amp;gl=kr">원본링크</a></p></blockquote><p>&nbsp;</p><p>istore_n 쪽이 &nbsp;오히려 효율적이라는 말이 나와 있습니다. 만약 iload_n도 마찬가지라면 goto가 찾아가는 라인에서는 iload_n이 있는 예제2가 더 효율적인 코드일 수도 있다는 것입니다. 어쨓든 이런 작은 차이를 접어둔다면 코드가 하는 일의 절차는 차이가 없습니다.</p><p><br><strong>&nbsp;</strong>결국 <strong>"루프 안에서 반복되는 변수 선언을 밖으로 빼는 것은 성능상에 아무런 이점이 없고 소스에서 변수의 유효범위만 늘어나게 한다. "</strong> 는 것입니다.</p><p>&nbsp;</p><p>&nbsp;여기서 이런 말을 하실 분이&nbsp;계실&nbsp;것&nbsp;같습니다.</p><p>"원래는&nbsp;변수를 loop안에 생성하는&nbsp;루프가 돌 때마다&nbsp;String 객체의&nbsp;참조를 저장하기 위한&nbsp;&nbsp;공간이 따로 할당되는 것인데 위의 경우는 JVM에서 최적화를 해 준 것 아니냐?&nbsp; &nbsp;JVM에 따라서 이런 최적화가 안 되는 버전도 있을 수가 있는데 개발자는&nbsp;어떤 JVM에서도 한번만 선언이 되도록 루프 밖에 변수를 선언해야 하지 않겠냐? "</p><p><a class="wiki" title="Java의 호출은 pass by value" href="http://benelog.springnote.com/pages/36726"></a></p><p>&nbsp;</p><p>그러나 <a class="external" title="Java™ Virtual Machine Specification, The, 2nd Edition" href="http://www.informit.com/bookstore/product.asp?isbn=0201432943&amp;aid=9f15cdfa-4e22-40dc-bfc9-cdc6322be0fd&amp;rl=1"><em class="italic">Java™ Virtual Machine Specification, The, 2nd Edition</em></a>&nbsp;이라는 책을 보면 다음과 같은 내용이 있습니다.</p><p>&nbsp;</p><blockquote><p>The sizes of the local variable array and the operand stack are determined at compile time and are supplied along with the code for the method associated with the frame&nbsp;.</p></blockquote><p>&nbsp;</p><p>위의&nbsp;문장은 메소드가 호출될&nbsp;때 생성되는 저장공간인 frame에 대한 설명에서 인용한 것입니다. (원문링크 : <em class="italic"><a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/Overview.doc.html#15722">http://java.sun.com/docs/books/vmspec/2nd-edition/html/Overview.doc.html#15722</a></em>)</p><p>&nbsp;풀이하면&nbsp; 메소드&nbsp;안의&nbsp;local variable들의 값들은 고정된 크기의 배열에 저장되고 그 배열의 크기는 compile시에 결정된다는&nbsp; 내용이 있습니다.&nbsp;즉 한 메소드 안에서 사용할 local variable이 저장될 공간의 갯수는 이미 compile 시에 정해져 있는 것이지 동적으로 변하는 것이 아니라는 말입니다. 만약 위의 소스에서 list의 갯수에 따라서 local variable의 값이 저장되는 공간(객체가 저장되는 공간을 가리키는 말이 아닙니다.)이 달라진다면 위의 설명과 모순되는 일입니다.</p><p>&nbsp;</p><p><a href="http://forum.java.sun.com/thread.jspa?threadID=707455&amp;messageID=4098210"></a></p><p>&nbsp;비슷한 설명과 논쟁이 인터넷의 여러 곳에서 이미 벌어졌으니 아래의 링크를 읽어보셔도 재밌을 것입니다.</p><ol><li>local variables in Java : <a class="external" title="http://rmathew.blogspot.com/2007/01/local-variables-in-java.html" href="http://rmathew.blogspot.com/2007/01/local-variables-in-java.html">http://rmathew.blogspot.com/2007/01/local-variables-in-java.html</a> <li>Myth - Defining loop variables inside the loop is bad for performance : <a class="external" title="http://livingtao.blogspot.com/2007/05/myth-defining-loop-variables-inside.html" href="http://livingtao.blogspot.com/2007/05/myth-defining-loop-variables-inside.html">http://livingtao.blogspot.com/2007/05/myth-defining-loop-variables-inside.html</a> <li><a href="http://forum.java.sun.com/thread.jspa?threadID=707455&amp;messageID=4098210"></a><a class="external" title="http://forum.java.sun.com/thread.jspa?threadID=707455&amp;messageID=4098210" href="http://forum.java.sun.com/thread.jspa?threadID=707455&amp;messageID=4098210">http://forum.java.sun.com/thread.jspa?threadID=707455&amp;messageID=4098210</a> <li><a class="external" title="http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html" href="http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html"></a><a class="external" title="http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html" href="http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html">http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html</a> <li><a href="http://www.theserverside.com/news/thread.tss?thread_id=41857">http://www.theserverside.com/news/thread.tss?thread_id=41857</a> </li></ol><p style="MARGIN-LEFT: 1em"><a href="http://weblogs.java.net/blog/ddevore/archive/2006/08/declare_variabl_1.html"></a></p><p>&nbsp;</p><p>1,2번 링크가 바이트코드 역어셈블 결과와 함께 내용을 잘 풀어서 설명하고 있습니다. 3번 링크에서 Dru Devore는 primitive type일 때는 똑같고 Object type일때는 다르다는 결론을 쓰고 있으나, 사실 그가 든 object type의 예제는 '객체를 한번 생성하느냐'&nbsp;대 '반복해서 생성하느냐'의 문제이므로 경우가 다릅니다.&nbsp;3번 링크의 댓글에서&nbsp;다른 사람들도 그 점을 지적하고 있고 2번 링크의 글에서도 관련 설명이 있습니다. 어쨓든 루프밖에 있으나 안에 있으나 바이트코드의 실행과정은 같고 성능은 차이가 없다는 내용은 모든&nbsp;페이지에 다&nbsp;&nbsp;있군요.</p><p>&nbsp;</p><p>이런 오해들은 전에 <a class="wiki" title="Java의 호출은 pass by value" href="http://benelog.springnote.com/pages/36726"><em class="italic">Java의 호출은 pass by value</em></a>&nbsp;에서 말했던 객체선언에 대한 오해와 어느 정도 관련이 있다고 봅니다. 객체를 생성이나 사용을 안 하더라도 선언 자체만으로 저장을 위한 큰 공간이 할당된다고 믿는 경우가 많은 것 같습니다.</p><p>&nbsp;</p><p>전에 이런 코드를&nbsp;본적이 있습니다.&nbsp;클래스의 멤버 변수로 임시 객체를 생성해 놓고 그것을 여러개의 메소드에서 같이&nbsp;쓰는 코드였었습니다.</p><blockquote><p>Class&nbsp;MyClass{</p><p style="MARGIN-LEFT: 1em"><strong><em class="italic">String&nbsp;&nbsp;temp;</em></strong></p><p style="MARGIN-LEFT: 1em"></p><p style="MARGIN-LEFT: 2em">void work(List list){</p><p style="MARGIN-LEFT: 3em">&nbsp;for (int i=0; i = list.size(); i++){</p><p style="MARGIN-LEFT: 4em">temp = (String)&nbsp;list.get(i);</p><p style="MARGIN-LEFT: 4em">//기타...</p><p style="MARGIN-LEFT: 3em">}</p><p style="MARGIN-LEFT: 2em">}</p><p style="MARGIN-LEFT: 2em">void play(List list){</p><p style="MARGIN-LEFT: 3em">&nbsp;for (int i=0; i = list.size(); i++){</p><p style="MARGIN-LEFT: 4em">temp = (String)&nbsp;list.get(i);</p><p style="MARGIN-LEFT: 4em">//기타...</p><p style="MARGIN-LEFT: 3em">}</p><p style="MARGIN-LEFT: 2em">}</p><p>}</p></blockquote><p>&nbsp;</p><p>이런 코드를 짰던 사람도&nbsp;경력도 어느 정도 되고, 실력도 있어보이는&nbsp;사람이였죠. 아마 이 개발자는 이런 구조가 temp 객체가 저장될 공간을 상당히 아꼈다는 뿌듯함을 가지고 있었을 지도 모릅니다. 그러나 객체는 Heap 메모리에 있는 것이기에 지역변수가 선언이 하나 덜 되었다고 해서 객체가 줄어든 것은 아닙니다.&nbsp;그리고 여기서는 list에서 받아오지 새로 생성되는 객체는 없습니다. 더군다나 설계상 의미로도 temp는 Class의 멤버로써 아무런 의미가 없습니다. 성능측면에서 봐도&nbsp;&nbsp;클래스 멤버 변수는 지역변수에 비해서&nbsp;더 비용이 큽니다. (참고자료 2: 자바 퍼포먼스 튜닝)</p><p>&nbsp;</p><p>한편으로는&nbsp;변수의 범위를 줄인다고 해서&nbsp;반복적으로 Loop 안에서 실행해줄 필요가 없는 작업까지 loop안으로 끌고 들어가서는 안되겠죠. 다음과 같은 코드를 본적이 있습니다.</p><blockquote><p>for (int&nbsp;i=0, n=userList.size(); i&lt;n;i++){</p><p style="MARGIN-LEFT: 1em"><em class="underline"><strong><span class="underline">UserBiz biz =&nbsp;(UserBiz)&nbsp;lookup(UserBiz.ROLE);</span></strong></em> //비지니스&nbsp;컴포넌트 객체를 얻어온다.</p><p>&nbsp;&nbsp; UserVO vo = (UserVO)userList.get(i);</p><p style="MARGIN-LEFT: 1em">biz.add(vo);</p><p>&nbsp;}</p></blockquote><p>&nbsp;</p><p>위의 코드에서&nbsp;비지니스 컴포넌트를 얻어오는 부분은 반복적으로 수행될 필요가 없으므로 loop 밖으로 나가는 것이 맞습니다.&nbsp; 위의 biz 객체를 loop안에서만 쓴다고 하여도 위와 같이 해당 코드가 안으로 들어가 있다면 한번만 얻어오는 되는 객체를 얻어오는 작업이 계속 반복될 것 입니다. 사실 위의 경우는 비지니스 객체에서 List를 받아서 처리하는 메소드를 하나 더 만드는 것이 나을 것 같네요. 아키텍쳐에 따라 다르지만 비지니스 객체의 호출은 비싼 작업일 경우가 많고 그런 호출의 횟수는 최대한 줄일수록 좋겠죠.</p><p>&nbsp;</p><h3>개선된 for문</h3><p>Java&nbsp;5의 개선된&nbsp;for문을 아시는 분이라면&nbsp;아래의 방법을 많이 쓰실 것입니다.</p><blockquote><p>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</p><p>for (Integer i : list) { ... }</p></blockquote><p>&nbsp;( <a class="external" title="J2SE 5.0 in a Nutshell" href="http://java.sun.com/developer/technicalArticles/releases/j2se15/">J2SE 5.0 in a Nutshell</a>&nbsp;에서)</p><p>보기에도 이쁘고, 변수의 유효범위가 loop을 벗어나지도 않는 좋은 문법이네요. ^^ 프로젝트에서 Java 5 이상을 쓰시고 계신다면 변수를 loop안에 넣느냐로 논쟁하기 전에 개선된 for문을 먼저 적용해 보는것이 나을 것 같습니다.</p><p>&nbsp;</p><h3>마치며</h3><p>위의 내용을&nbsp;묶어서 결론을&nbsp;내리자면,&nbsp;"<strong><em class="underline">loop안에서만 쓰는 변수 선언을 밖으로 빼는 것은 성능에 아무런 영향이 없으며, 굳이 성능을 개선하고 싶다면 RandomAccess 인터페이스의 고려, 반복되는 list크기 계산의 제거 등을 먼저 신경쓰라. 그리고 Java5을 쓰고 있다면 개선된 for문을 쓰라.</em></strong>"는 것으로&nbsp;&nbsp;정리하고 싶습니다.</p><p>&nbsp;</p><p>사실 성능에 대한 고려는 병목이 발견될 때 필요하다면 하는 것이 바람직한 순서겠죠. 개발자는 알아보기 싶고, 관리하기 쉬운 코드를 짜는 것에 먼저 집중을 해야 할 것입니다.&nbsp;그리고 고용량의 CPU가 돌아가는 환경이라면&nbsp;개발자가 성능을 고려해서 짠 코드와 그렇지 않은 코드의 차이도&nbsp; 대부분 사람이 인지하지 못하는 정도의 미미한 것일 가능성이 높습니다. (TA팀 이상민 선임님의 테스트와 조언). 그런 점에서 본다면 이 글에서 가장 강조되어야 할 내용은 '변수의 유효범위의 최소화'라고 생각됩니다.</p><p>&nbsp;</p><p>다른 분들이 추가로 자료를 찾는 번거로움을 덜어 드릴려고 관련 자료를 되도록&nbsp;인용하고 링크를 걸었습니다. 그렇게는 했어도&nbsp;혹시나 제가 잘못 이해해서 오류가 있는 부분이 있는지도 모르겠습니다.&nbsp;&nbsp;고수분들은 그런 부분을 발견하신다면 즉각 지적해 주시기 바랍니다~ ^^</p><p>그리고&nbsp;이&nbsp;글은&nbsp;계속적으로&nbsp;갱신해서 개선을&nbsp;&nbsp;하고&nbsp;있는 중입니다.&nbsp;제가 가입해 있는 커뮤니티 사이트 중 두 곳에도 이 글을 올렸는데, 거기에서&nbsp;조언을 주신 많은 분들께도 감사드립니다. </p><p>&nbsp;</p><h3>참고자료</h3><p>Java API문서와 링크외의 책에서 참고한 내용입니다.</p><p>&nbsp;</p><ol><li>Effective Java&nbsp;, Joshua Bloch저 이해일역 <ul><li>&nbsp;7장 프로그래밍 일반 - 항목29 -&nbsp;지역변수의 유효범위를 최소화하라. </li></ul><li>자바퍼포먼스 튜닝, Jack Shirazi 저 서민구 역&nbsp; <ul><li>11장 적절한 자료구조와 알고리즘&nbsp;&nbsp;&nbsp; <ul><li>질의 최적화&nbsp;-&nbsp;불필요한 반복적 메소드 호출 제거 <li>RandomAccess 인터페이스 </li></ul><li>6장&nbsp;예외 단언,&nbsp;캐스팅, 변수 - 변수 </li></ul><li>Code&nbsp;completed 2nd Edtion, Streve McConnell 저 서우석 역&nbsp;&nbsp; <ul><li>10장 변수사용시 일반적인 문제 - 10.3 변수의 초기화에 대한 지침 </li></ul><li>Head First Design Pattern<br><ul><li>9장 이터레이터와 컴포지트 패턴 </li></ul><li style="LIST-STYLE-TYPE: none">ListReader1ByteCode분석<a class="attachment" title="ListReader1ByteCode분석.txt" href="http://benelog.springnote.com/pages/386996/attachments/166327"></a></li></ol>
